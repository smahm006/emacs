# -*- mode: org; -*-
#+TITLE: GNU Emacs Configuration
#+AUTHOR: Sohaib Mahmood
#+STARTUP: show2levels indent
#+PROPERTY: header-args :mkdirp yes :comments org :results none
#+EXCLUDE_TAGS: noexport
#+VERSION: 1.2.0
#+auto_tangle: t
* About
This is the configuration for my personal GNU Emacs setup.
** Header
#+name: header
#+begin_src emacs-lisp :var name="file name" :var description="file description"
  ;; Default header to be used for tangled file
  (format
   ";; %s - %s
  ;; Copyright (C) 2023-%s Sohaib Mahmood
  ;; Homepage: https://github.com/smahm006/emacs
  ;; Code:"
   name description (format-time-string "%Y") (format-time-string "%Y-%m-%d"))
#+end_src
** Footer
#+name: footer
#+begin_src emacs-lisp :var name="file name"
  ;; Footer to be used for lisp tangled file
  (format
   ";; %s.el end
  (provide '%s)"
   name name)
#+end_src
* Early Emacs Initialization
:PROPERTIES:
:header-args+: :tangle early-init.el
:END:
** XDG Directory
[[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Base Directory]]
#+begin_src emacs-lisp :noweb yes
<<header(name="early-init.el", description="Sets up core settings before the first frame is created.")>>
#+end_src
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defvar xdg-home (getenv "HOME"))
    (defvar xdg-state (getenv "XDG_STATE_HOME"))
    (defvar xdg-data (getenv "XDG_DATA_HOME"))
    (defvar xdg-config (getenv "XDG_CONFIG_HOME"))
    (defvar xdg-cache (getenv "XDG_CACHE_HOME"))
    (defvar xdg-lib (getenv "XDG_LIB_HOME")))
#+end_src
** Optimize Startup Time
#+begin_src emacs-lisp  
  ;; We're going to increase the gc-cons-threshold to a very high number to decrease the load time and add a hook to measure Emacs startup time.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; Let's lower our GC thresholds back down to a sane level.
  (add-hook 'after-init-hook
            (lambda ()
              ;; restore after startup
              (setq gc-cons-threshold (* 16 1024 1024))) 99)

  ;; Profile emacs startup
  (add-hook 'after-init-hook
            (lambda ()
              (message "ðŸš€ Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Ignore X resources; its settings would be redundant with the other settings
  ;; in this file and can conflict with later config (particularly where the
  ;; cursor color is concerned).
  (advice-add #'x-apply-session-resources :override #'ignore)

  ;; remove "for information about gnu emacs..." message at startup
  (advice-add #'display-startup-echo-area-message :override #'ignore)

  ;; suppress the vanilla startup screen completely. we've disabled it with
  ;; `inhibit-startup-screen', but it would still initialize anyway.
  (advice-add #'display-startup-screen :override #'ignore)

  ;; never show the hello file
  (defalias #'view-hello-file #'ignore)

  ;; Disable warnings from the legacy advice API. They aren't useful.
  (setq ad-redefinition-action 'accept)

  ;; Ignore warnings about "existing variables being aliased".
  (setq warning-suppress-types '((defvaralias) (lexical-binding)))

  ;; Unset `file-name-handler-alist' too (temporarily). Every file opened and
  ;; loaded by Emacs will run through this list to check for a proper handler for
  ;; the file, but during startup, it wonâ€™t need any of them.
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist file-name-handler-alist-old)))

  ;; Remove irreleant command line options for faster startup
  (setq command-line-x-option-alist nil)

  ;; Minimal UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Configure Byte Compile
#+begin_src emacs-lisp    
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer t)

  ;; Ensure JIT compilation is enabled for improved performance by
  ;; native-compiling loaded .elc files asynchronously
  (setq native-comp-jit-compilation t)

  ;; Move native compilation cache directory to xdg-cache
  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache
     (expand-file-name (format "%s/emacs/eln-cache/" xdg-cache))))

  ;; Disable certain byte compiler warnings to cut down on the noise.
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Ensure that quitting only occurs once Emacs finishes native compiling,
  ;; preventing incomplete or leftover compilation files in `/tmp`.
  (setq native-comp-async-query-on-exit t)
  (setq confirm-kill-processes t)
#+end_src
** Runtime optimizations
#+begin_src emacs-lisp  
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
#+end_src
#+begin_src emacs-lisp :noweb yes
<<footer(name="early-init")>>
#+end_src
* Emacs Initialization
:PROPERTIES:
:header-args+: :tangle init.el
:END:
** General Defaults
#+begin_src emacs-lisp :noweb yes
<<header(name="init.el", description="Main configuration file, used for setting up packages, keybindings, and behavior.")>>
#+end_src
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    ;; User details
    (user-full-name "Sohaib Mahmood")                     ; Set the full name of the current user
    (user-mail-address "soh.mahmood@fastmail.com")        ; Set the email address of the current user
    
    ;; Startup
    ;; Emacs does a lot of things at startup and here, we disable pretty much everything.
    (inhibit-splash-screen t)                            ; Disable startup screens and messages
    (inhibit-startup-buffer-menu t)                      ; Disable display of buffer list when more than 2 files are loaded
    (inhibit-startup-echo-area-message t)                ; Disable initial echo message
    (inhibit-startup-message t)                          ; Disable startup message
    (inhibit-startup-screen t)                           ; Disable start-up screen
    (initial-scratch-message "")                         ; Empty the initial *scratch* buffer

    ;; Dialogs
    ;; use simple text prompts
    (use-dialog-box nil)                                 ; Don't pop up UI dialogs when prompting
    (use-file-dialog nil)                                ; Don't use UI dialogs for file search
    (use-short-answers t)                                ; Replace yes/no prompts with y/n
    (confirm-nonexistent-file-or-buffer nil)             ; Ok to visit non existent files

    ;; Default mode
    ;; Default & initial mode is text.
    (initial-major-mode 'fundamental-mode)               ; Initial mode is text
    (default-major-mode 'fundamental-mode)               ; Default mode is text

    ;; Performance
    ;; https://github.com/alexluigit/dirvish/blob/main/docs/.emacs.d.example/early-init.el
    (read-process-output-max (* 1024 1024))              ; Increase how much is read from processes in a single chunk.
    (select-active-regions 'only)                        ; Emacs hangs when large selections contain mixed line endings.
    (vc-handled-backends '(Git SVN))                     ; Remove unused VC backend

    ;; Miscellaneous
    (native-comp-async-report-warnings-errors 'silent)   ; Disable native compiler warnings
    (fringes-outside-margins t)                          ; DOOM: add some space between fringe it and buffer.
    (windmove-mode nil)                                  ; Diasble windmove mode
    (comment-auto-fill-only-comments t)                  ; Use auto fill mode only in comments
    (custom-buffer-done-kill t)                          ; Kill custom buffer when done
    :hook
    (kill-emacs . (lambda () (setq kill-ring (mapcar 'substring-no-properties kill-ring))))
    :config
    (add-to-list 'load-path (expand-file-name (format "%s/emacs/lisp/" xdg-config))))
#+end_src
** Functions
Some useful utility functions
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :bind
    (("<f5>" . smahm006/reload-config))
    :preface
    ;; Non-interactive
    (defun smahm006/emacs.d (path)
      "Return the full path pointing to user-emacs-directory"
      (expand-file-name path user-emacs-directory))
    (defun smahm006/mkdir (dir-path)
      "Make directory in DIR-PATH if it doesn't exist."
      (unless (file-exists-p dir-path)
        (make-directory dir-path t)))
    (defun smahm006/location ()
      "Return 'home' if system-name starts with 'sm-', otherwise return 'work'."
      (if (string-match-p "^sm-" (system-name))
      	"home"
        "work"))
    ;; Interactive    
    (defun smahm006/reload-config ()
      "Reload init file, which will effectively reload everything"
      (interactive)
      (load-file (expand-file-name "init.el" user-emacs-directory)))
    (global-set-key (kbd "<f5>") 'smahm006/reload-config)
    (defun smahm006/revert-buffer-no-confirm ()
      "Revert buffer without confirmation."
      (interactive)
      (revert-buffer :ignore-auto :noconfirm)))
#+end_src
** Keymaps
Keymaps used for important built-in command or commands from other packages
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defvar smahm006/window-map (make-sparse-keymap) "key-map for window commands")
    (defvar smahm006/buffer-map (make-sparse-keymap) "key-map for buffer commands")
    (defvar smahm006/file-map (make-sparse-keymap) "key-map for file commands")
    (defvar smahm006/version-control-map (make-sparse-keymap) "key-map for version control commands")
    (defvar smahm006/org-map (make-sparse-keymap) "key-map for org commands")
    (defvar smahm006/note-map (make-sparse-keymap) "key-map for note taking commands")
    :config
    (define-key mode-specific-map (kbd "w") (cons "window" smahm006/window-map))
    (define-key mode-specific-map (kbd "b") (cons "buffer" smahm006/buffer-map))
    (define-key mode-specific-map (kbd "f") (cons "file" smahm006/file-map))
    (define-key mode-specific-map (kbd "o") (cons "note" smahm006/org-map))    
    (define-key mode-specific-map (kbd "n") (cons "note" smahm006/note-map)))
#+end_src
** Packages
To manage packages, I use [[https://github.com/jwiegley/use-package/][use-package]].
*** Package Configuration
To manage the package configurations with use-package, we add some required libraries
#+begin_src emacs-lisp
  (use-package use-package
    :ensure nil
    :custom
    (use-package-always-ensure t)    ;; Always make sure package is downloaded
    (use-package-always-defer t)     ;; Defer package Enable lazy loading per default
    :config
    ;; Load packages from these archives
    (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    ;; Highest number gets priority (what is not mentioned has priority 0)
    (setq package-archive-priorities
      	'(("gnu-elpa" . 3)
            ("melpa" . 2)
            ("nongnu" . 1)))
    ;; Make use-package more verbose when `--debug-init` flag is passed
    (when init-file-debug
      (setq use-package-verbose t
  	  use-package-expand-minimally nil
  	  use-package-compute-statistics t
  	  jka-compr-verbose t
  	  warning-minimum-level :warning
  	  byte-compile-warnings t
  	  byte-compile-verbose t
  	  native-comp-warning-on-missing-source t
  	  debug-on-error t)))
#+end_src
*** Package Automatic Updates
There is no default way to auto update packages so we will use the
auto-package-update package
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
** System Configuration
*** Environment
By default not all environment variables are copied to Emacs. This package ensures proper synchronization between the two.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :custom
  (epg-pinentry-mode 'loopback)
  (exec-path-from-shell-variables '("PATH" "SHELL" "GOPATH"))
  :config
  (setenv "SSH_AUTH_SOCK" (string-chop-newline (shell-command-to-string "gpgconf --list-dirs agent-ssh-socket")))
  (exec-path-from-shell-initialize))
#+end_src
*** Authentication
I use a GPG key stored in a Yubikey for most of my authentication
#+begin_src emacs-lisp
  (use-package epa-file
    :ensure nil
    :init
    (epa-file-enable))
#+end_src
*** No-littering
The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isnâ€™t just a problem with third-party packages but even with built-in packages. The following package helps sort that out.
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :init
    ;; Store backup and auto-save files in no-littering-var-directory
    (setq no-littering-etc-directory (format "%s/emacs/etc/" xdg-data))
    (smahm006/mkdir no-littering-etc-directory)
    (setq no-littering-var-directory (format "%s/emacs/var/" xdg-data))
    (smahm006/mkdir no-littering-etc-directory)
    (setq no-littering-cache-directory (format "%s/emacs/etc" xdg-cache))
    (smahm006/mkdir no-littering-etc-directory)
    (no-littering-theme-backups)
    ;; Store customization file in no-littering-var-directory
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (when (file-exists-p custom-file) (load custom-file))
    ;; Store cookies in cache directory
    (setq url-cookie-file no-littering-cache-directory)
    ;; Store lock files in in no-littering-var-directory
    (let ((dir (no-littering-expand-var-file-name "lock-files/")))
      (smahm006/mkdir dir)
      (setq lock-file-name-transforms `((".*", dir t)))))
#+end_src
* Org
:PROPERTIES:
:header-args+: :tangle lisp/smahm006-org.el
:END:
Org short for organization of my life mainly by using org-mode
** Org Defaults
#+begin_src emacs-lisp :tangle init.el
  (require 'smahm006-org)
#+end_src
#+begin_src emacs-lisp :noweb yes
<<header(name="smahm006-org.el", description="User Interface customizations for themes, fonts and icons")>>
#+end_src
#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :init
    (setq org-directory (format "%s/org" xdg-home))
    (let ((org-archive-directory (format "%s/archives" org-directory)))
      (smahm006/mkdir org-archive-directory)
      (setq org-archive-location (format "%s/%%s::" org-archive-directory)))
    :hook
    (org-mode . org-indent-mode)
    (org-mode . visual-line-mode)    
    :bind
    (:map smahm006/org-map
          ("c" . org-capture)
          ("a" . org-agenda)) 
    :custom
    (org-confirm-babel-evaluate nil)                     ; Do not ask about code evaluation
    (org-return-follows-link t)                          ; Follow links if entered on
    (org-mouse-1-follows-link t)                         ; Follow links if clicked on
    (org-link-descriptive t)                             ; Show links by description not URL
    (org-enforce-todo-dependencies t)                    ; Cannot set a headline to DONE if children arenâ€™t DONE
    (org-log-done 'time)                                 ; Add timstamp to items when done    
   
    ;; Languages to autoload for babel
    (org-babel-load-languages '((emacs-lisp . t)
                                (shell . t)
  			      (python . t)
  			      (ledger . t))))
#+end_src
**** [[https://github.com/yilkalargaw/org-auto-tangle.git][org-auto-tangle]]
A simple emacs package to allow org file tangling upon save.
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
**** [[https://github.com/snosov1/toc-org.git][toc-org]]
Toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub).
#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))
** Styling
*** [[https://github.com/minad/org-modern][org-modern]]
Modernize the look of org
#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-ellipsis "â€¦")
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-agenda-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    :config
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))
#+end_src
*** [[https://github.com/awth13/org-appear][org-appear]]
Toggle visibility of hidden Org mode element parts upon entering and leaving an element.
#+begin_src emacs-lisp
  (use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src
** Capture
#+begin_src emacs-lisp :tangle init.el
  (use-package org-capture
    :ensure nil
    :custom
    ;; Todo
    (org-todo-keywords
     '((sequence
        "TODO(t)"  ; A task that needs doing & is ready to do
        "NEXT(n)"  ; Next task in a project          
        "|"
        "DONE(d)"  ; Task successfully completed
        )
       (sequence
        "WAIT(w)"  ; Something external is holding up this task
        "HOLD(h)"  ; This task is paused/on hold because of me
        "|"
        "KILL(k)"  ; Task was cancelled, aborted or is no longer applicable
        )))
    (org-todo-keyword-faces
     '(("TODO" :foreground "red" :weight bold)
       ("NEXT" :foreground "blue" :weight bold)
       ("DONE" :foreground "forest green" :weight bold)
       ("WAIT" :foreground "orange" :weight bold)
       ("HOLD" :foreground "magenta" :weight bold)
       ("KILL" :foreground "forest green" :weight bold))))
#+end_src
*** [[https://github.com/protesilaos/denote][denote]]
Simple notes with an efficient file-naming scheme
#+begin_src emacs-lisp
  ;; Another basic setup with a little more to it.
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (:map smahm006/note-map
  	(("n" . denote)
  	 ("r" . denote-rename-file)
  	 ("l" . denote-link)
  	 ("b" . denote-backlinks)
  	 ("d" . denote-sort-dired)))
    :config
    (let ((org-notes-directory (format "%s/notes" org-directory)))
      (smahm006/mkdir org-notes-directory)
      (setq denote-directory org-notes-directory))
    (denote-rename-buffer-mode 1))
#+end_src
** Agenda
#+begin_src emacs-lisp :tangle init.el
  (use-package org-agenda
    :ensure nil
    :bind (:map org-agenda-mode-map
                ("C-n" . org-agenda-next-item)
                ("C-p" . org-agenda-previous-item)
                ("g" . org-agenda-goto)
                ("X" . smahm/org-agenda-mark-done-next)
                ("x" . smahm/org-agenda-mark-done))
    :config
    (let ((org-agenda-directory (format "%s/agenda" org-directory)))
      (smahm006/mkdir org-agenda-directory)
      (org-agenda-files org-agenda-directory)))
#+end_src
** Finance
*** [[https://github.com/ledger/ledger-mode][ledger-mode]]
Good money management is a skill to be acquired as soon as possible. Fortunately
for us, [[https://www.ledger-cli.org/][Ledger]] allows you to have a double-entry accounting system directly from
the UNIX command line.
#+begin_src emacs-lisp
  (use-package ledger-mode
    :after org
    :mode ("\\.\\(dat\\|ledger\\)\\'")
    :hook (ledger-mode . ledger-flymake-enable)
    :bind
    (:map ledger-mode-map
          ("C-x C-s" . smahm006/ledger-save))
    (:map smahm006/org-map
          ("l" . smahm006/org-open-current-ledger))
    :preface
    (defun smahm006/org-open-current-ledger ()
      "Open the ledger file corresponding to the current year."
      (interactive)
      (let* ((current-year (format-time-string "%Y"))
             (ledger-file (format "%s/ledger/%s.org.gpg" org-dir current-year)))
        (find-file ledger-file)))
    (defun smahm006/ledger-save ()
      "Clean the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :custom
    (ledger-clear-whole-transactions t)
    :config
    (let ((org-ledger-directory (format "%s/ledger" org-directory)))
      (smahm006/mkdir org-ledger-directory)))
#+end_src
#+begin_src emacs-lisp :noweb yes
<<footer(name="smahm006-org")>>
#+end_src
* User Interface
:PROPERTIES:
:header-args+: :tangle lisp/smahm006-ui.el
:END:
** UI Defaults
#+begin_src emacs-lisp :tangle init.el
  ;; User Interface 
  (require 'smahm006-ui)
#+end_src
#+begin_src emacs-lisp :noweb yes
<<header(name="smahm006-ui.el", description="User Interface customizations for themes, fonts and icons")>>
#+end_src
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    ;; Mouse
    (context-menu-mode (display-graphic-p))              ; Enable context menu on right click
    (mouse-yank-at-point t)                              ; Yank at point rather than pointer
    (xterm-mouse-mode (not (display-graphic-p)))         ; Mouse active in tty mode.
    (make-pointer-invisible t)                           ; Hide mouse pointer when typing

    ;; Cursor
    (cursor-type bar)                                    ; Underline-shaped cursor
    (cursor-intangible-mode t)                           ; Enforce cursor intangibility
    (x-stretch-cursor nil)                               ; Don't stretch cursor to the glyph width
    (blink-cursor-mode t)                                ; Blink cursor
    
    ;; Enable window dividers
    (window-divider-default-bottom-width 2)
    (window-divider-default-right-width 2)
    (window-divider-default-places t)
    (window-divider-mode t)    
    :init
    ;; Modify width and height of frames
    (modify-all-frames-parameters '((width . 200)
                                    (height . 50))))

#+end_src
** Theming
I switch themes quite often but usually I prefer high contrast dark themes.
#+begin_src emacs-lisp
(use-package gruber-darker-theme
  :if (and (display-graphic-p) (string= (smahm006/location) "home"))
  :init
  (load-theme 'gruber-darker t))
#+end_src
** Fonts
** Icons
** Menus
** Modeline
** Dashboard
#+begin_src emacs-lisp :noweb yes
<<footer(name="smahm006-ui")>>
#+end_src
* Management
** Buffer Management
** Window Management
** Minibuffer Management
** Project Management
** File Management
* Editing
** Deletion
** Navigation
** Search and Replace
** Spellchecking
** Multi-Cursor Editing
** Undo & Redo
** Privileged Editing
* Development
** Tree-sitter
** Version Control
** Language Servers
** Linters and Documentation
** Snippets
** Virtualization
* Languages
** Markup & Configuration
*** HTML
*** JSON
*** TOML
*** XML
*** YAML
** Scripting
*** Bash
** Application Programming
*** Python
*** Go
** Software Programming
*** C
*** C++
*** Rust

# #+begin_src emacs-lisp
#   (use-package emacs
#     :ensure nil
#     :preface)
# #+end_src
