# -*- mode: org; -*-
#+TITLE: GNU Emacs Configuration
#+AUTHOR: Sohaib Mahmood
#+STARTUP: show2levels indent
#+EXCLUDE_TAGS: noexport
#+VERSION: 1.2.0
This is the configuration for my personal GNU Emacs setup.
* Table of Contents :TOC_2_gh:noexport:
- [[#early-emacs-initialization][Early Emacs Initialization]]
  - [[#header][Header]]
  - [[#xdg-directory][XDG Directory]]
  - [[#optimize-startup-time][Optimize Startup Time]]
  - [[#configure-byte-compile][Configure Byte Compile]]
  - [[#runtime-optimizations][Runtime optimizations]]
  - [[#footer][Footer]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#header-1][Header]]
  - [[#general-defaults][General Defaults]]
  - [[#functions][Functions]]
  - [[#keymaps][Keymaps]]
  - [[#modes][Modes]]
  - [[#packages][Packages]]
  - [[#system-configuration][System Configuration]]
  - [[#footer-1][Footer]]
- [[#org][Org]]
  - [[#header-2][Header]]
  - [[#org-defaults][Org Defaults]]
  - [[#styling][Styling]]
  - [[#capture][Capture]]
  - [[#agenda][Agenda]]
  - [[#finance][Finance]]
  - [[#footer-2][Footer]]
- [[#user-interface][User Interface]]
  - [[#header-3][Header]]
  - [[#ui-defaults][UI Defaults]]
  - [[#appearance][Appearance]]
  - [[#lines][Lines]]
  - [[#modeline][Modeline]]
  - [[#footer-3][Footer]]
- [[#user-experience][User Experience]]
  - [[#header-4][Header]]
  - [[#ux-defaults][UX Defaults]]
  - [[#completion][Completion]]
  - [[#window-management][Window Management]]
  - [[#buffer-management][Buffer Management]]
  - [[#file-management][File Management]]
  - [[#footer-4][Footer]]
- [[#text-manipulation][Text Manipulation]]
  - [[#deletion][Deletion]]
  - [[#navigation][Navigation]]
  - [[#search-and-replace][Search and Replace]]
  - [[#spellchecking][Spellchecking]]
  - [[#multi-cursor][Multi-Cursor]]
  - [[#undo--redo][Undo & Redo]]
  - [[#privileged][Privileged]]
- [[#development][Development]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#version-control][Version Control]]
  - [[#language-servers][Language Servers]]
  - [[#linters-and-documentation][Linters and Documentation]]
  - [[#snippets][Snippets]]
  - [[#virtualization][Virtualization]]
- [[#languages][Languages]]
  - [[#markup--configuration][Markup & Configuration]]
  - [[#scripting][Scripting]]
  - [[#application-programming][Application Programming]]
  - [[#software-programming][Software Programming]]

* Early Emacs Initialization
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
** Header
#+begin_src text
;; early-init.el - Sets up core settings before the first frame is created.
;; Copyright (C) 2023-2025 Sohaib Mahmood
;; Homepage: https://github.com/smahm006/emacs
;; Code:
#+end_src
** [[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Directory]]
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defvar xdg-home (getenv "HOME"))
    (defvar xdg-state (getenv "XDG_STATE_HOME"))
    (defvar xdg-data (getenv "XDG_DATA_HOME"))
    (defvar xdg-config (getenv "XDG_CONFIG_HOME"))
    (defvar xdg-cache (getenv "XDG_CACHE_HOME"))
    (defvar xdg-lib (getenv "XDG_LIB_HOME")))
#+end_src
** Optimize Startup Time
#+begin_src emacs-lisp  
  ;; We're going to increase the gc-cons-threshold to a very high number to decrease the load time and add a hook to measure Emacs startup time.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; Let's lower our GC thresholds back down to a sane level.
  (add-hook 'after-init-hook
            (lambda ()
              ;; restore after startup
              (setq gc-cons-threshold (* 16 1024 1024))) 99)

  ;; Profile emacs startup
  (add-hook 'after-init-hook
            (lambda ()
              (message "ðŸš€ Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Ignore X resources; its settings would be redundant with the other settings
  ;; in this file and can conflict with later config (particularly where the
  ;; cursor color is concerned).
  (advice-add #'x-apply-session-resources :override #'ignore)

  ;; remove "for information about gnu emacs..." message at startup
  (advice-add #'display-startup-echo-area-message :override #'ignore)

  ;; suppress the vanilla startup screen completely. we've disabled it with
  ;; `inhibit-startup-screen', but it would still initialize anyway.
  (advice-add #'display-startup-screen :override #'ignore)

  ;; never show the hello file
  (defalias #'view-hello-file #'ignore)

  ;; Disable warnings from the legacy advice API. They aren't useful.
  (setq ad-redefinition-action 'accept)

  ;; Ignore warnings about "existing variables being aliased".
  (setq warning-suppress-types '((defvaralias) (lexical-binding)))

  ;; Unset `file-name-handler-alist' too (temporarily). Every file opened and
  ;; loaded by Emacs will run through this list to check for a proper handler for
  ;; the file, but during startup, it wonâ€™t need any of them.
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist file-name-handler-alist-old)))

  ;; Remove irreleant command line options for faster startup
  (setq command-line-x-option-alist nil)

  ;; Minimal UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Configure Byte Compile
#+begin_src emacs-lisp    
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer t)

  ;; Ensure JIT compilation is enabled for improved performance by
  ;; native-compiling loaded .elc files asynchronously
  (setq native-comp-jit-compilation t)

  ;; Move native compilation cache directory to xdg-cache
  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache
     (expand-file-name (format "%s/emacs/eln-cache/" xdg-cache))))

  ;; Disable certain byte compiler warnings to cut down on the noise.
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Ensure that quitting only occurs once Emacs finishes native compiling,
  ;; preventing incomplete or leftover compilation files in `/tmp`.
  (setq native-comp-async-query-on-exit t)
  (setq confirm-kill-processes t)
#+end_src
** Runtime optimizations
#+begin_src emacs-lisp  
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
#+end_src
** Footer
#+begin_src text
;; early-init.el end
(provide 'early-init)
#+end_src
* Emacs Initialization
:PROPERTIES:
:header-args: :tangle init.el
:END:
** Header
#+begin_src text
;; init.el - User configuration entry point for Emacs, loading custom modules and settings
;; Copyright (C) 2023-2025 Sohaib Mahmood
;; Homepage: https://github.com/smahm006/emacs
;; Code:
#+end_src
** General Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    ;; User details
    (user-full-name "Sohaib Mahmood")                     ; Set the full name of the current user
    (user-mail-address "soh.mahmood@fastmail.com")        ; Set the email address of the current user
    
    ;; Startup
    ;; Emacs does a lot of things at startup and here, we disable pretty much everything.
    (inhibit-splash-screen t)                            ; Disable startup screens and messages
    (inhibit-startup-buffer-menu t)                      ; Disable display of buffer list when more than 2 files are loaded
    (inhibit-startup-echo-area-message t)                ; Disable initial echo message
    (inhibit-startup-message t)                          ; Disable startup message
    (inhibit-startup-screen t)                           ; Disable start-up screen
    (initial-scratch-message "")                         ; Empty the initial *scratch* buffer

    ;; Dialogs
    ;; use simple text prompts
    (use-dialog-box nil)                                 ; Don't pop up UI dialogs when prompting
    (use-file-dialog nil)                                ; Don't use UI dialogs for file search
    (use-short-answers t)                                ; Replace yes/no prompts with y/n
    (confirm-nonexistent-file-or-buffer nil)             ; Ok to visit non existent files

    ;; Default mode
    ;; Default & initial mode is text.
    (initial-major-mode 'fundamental-mode)               ; Initial mode is text
    (default-major-mode 'fundamental-mode)               ; Default mode is text

    ;; Performance
    ;; https://github.com/alexluigit/dirvish/blob/main/docs/.emacs.d.example/early-init.el
    (read-process-output-max (* 1024 1024))              ; Increase how much is read from processes in a single chunk.
    (select-active-regions 'only)                        ; Emacs hangs when large selections contain mixed line endings.
    (vc-handled-backends '(Git SVN))                     ; Remove unused VC backend

    ;; Miscellaneous
    (native-comp-async-report-warnings-errors 'silent)   ; Disable native compiler warnings
    (fringes-outside-margins t)                          ; DOOM: add some space between fringe it and buffer.
    (windmove-mode nil)                                  ; Diasble windmove mode
    (comment-auto-fill-only-comments t)                  ; Use auto fill mode only in comments
    (custom-buffer-done-kill t)                          ; Kill custom buffer when done
    :hook
    (kill-emacs . (lambda () (setq kill-ring (mapcar 'substring-no-properties kill-ring))))
    :config
    (add-to-list 'load-path (expand-file-name (format "%s/emacs/lisp/" xdg-config))))
#+end_src
** Functions
Some useful utility functions
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :bind
    (("<f5>" . smahm006/reload-config))
    :preface
    ;; Non-interactive
    (defun smahm006/emacs.d (path)
      "Return the full path pointing to user-emacs-directory"
      (expand-file-name path user-emacs-directory))
    (defun smahm006/mkdir (dir-path)
      "Make directory in DIR-PATH if it doesn't exist."
      (unless (file-exists-p dir-path)
        (make-directory dir-path t)))
    (defun smahm006/location ()
      "Return 'home' if system-name starts with 'sm-', otherwise return 'work'."
      (if (string-match-p "^sm-" (system-name))
      	"home"
        "work"))
    ;; Interactive    
    (defun smahm006/reload-config ()
      "Reload init file, which will effectively reload everything"
      (interactive)
      (load-file (expand-file-name "init.el" user-emacs-directory)))
    (global-set-key (kbd "<f5>") 'smahm006/reload-config)
    (defun smahm006/revert-buffer-no-confirm ()
      "Revert buffer without confirmation."
      (interactive)
      (revert-buffer :ignore-auto :noconfirm)))
#+end_src
** Keymaps
Keymaps used for important built-in command or commands from other packages
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defvar smahm006/search-map (make-sparse-keymap) "key-map for searching")
    (defvar smahm006/goto-map (make-sparse-keymap) "key-map for going to places")
    (defvar smahm006/window-map (make-sparse-keymap) "key-map for window commands")
    (defvar smahm006/buffer-map (make-sparse-keymap) "key-map for buffer commands")
    (defvar smahm006/file-map (make-sparse-keymap) "key-map for file commands")
    (defvar smahm006/project-map (make-sparse-keymap) "key-map for project commands")
    (defvar smahm006/version-control-map (make-sparse-keymap) "key-map for version control commands")
    (defvar smahm006/org-map (make-sparse-keymap) "key-map for org commands")
    (defvar smahm006/note-map (make-sparse-keymap) "key-map for note taking commands")
    
    :config
    (define-key mode-specific-map (kbd "s") (cons "search" smahm006/search-map))
    (define-key mode-specific-map (kbd "g") (cons "goto" smahm006/goto-map))    
    (define-key mode-specific-map (kbd "w") (cons "window" smahm006/window-map))
    (define-key mode-specific-map (kbd "b") (cons "buffer" smahm006/buffer-map))
    (define-key mode-specific-map (kbd "f") (cons "file" smahm006/file-map))
    (define-key mode-specific-map (kbd "p") (cons "project" smahm006/project-map))    
    (define-key mode-specific-map (kbd "o") (cons "org" smahm006/org-map))    
    (define-key mode-specific-map (kbd "n") (cons "note" smahm006/note-map)))
#+end_src
** Modes
#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "https://anirudhsasikumar.net/blog/2005.01.21.html

     For sensitive files like password lists.
     It disables backup creation and auto saving.
     With no argument, this command toggles the mode.
     Non-null prefix argument turns on the mode.
     Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
  	;; Disable backups
  	(set (make-local-variable 'backup-inhibited) t)	
  	;; Disable auto-save
  	(if auto-save-default
  	    (auto-save-mode -1)))
      ;; Resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
      ;; Resort to default auto save setting
      (if auto-save-default
  	(auto-save-mode 1))))
#+end_src
** Packages
To manage packages, I use [[https://github.com/jwiegley/use-package/][use-package]].
*** Package Configuration
To manage the package configurations with use-package, we add some required libraries
#+begin_src emacs-lisp
  (use-package use-package
    :ensure nil
    :custom
    (use-package-always-ensure t)    ;; Always make sure package is downloaded
    (use-package-always-defer t)     ;; Defer package Enable lazy loading per default
    :config
    ;; Load packages from these archives
    (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
    ;; Highest number gets priority (what is not mentioned has priority 0)
    (setq package-archive-priorities
      	'(("gnu-elpa" . 3)
            ("melpa" . 2)
            ("nongnu" . 1)))
    ;; Make use-package more verbose when `--debug-init` flag is passed
    (when init-file-debug
      (setq use-package-verbose t
  	  use-package-expand-minimally nil
  	  use-package-compute-statistics t
  	  jka-compr-verbose t
  	  warning-minimum-level :warning
  	  byte-compile-warnings t
  	  byte-compile-verbose t
  	  native-comp-warning-on-missing-source t
  	  debug-on-error t)))
#+end_src
*** Package Automatic Updates
There is no default way to auto update packages so we will use the
auto-package-update package
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
** System Configuration
*** Environment
**** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
By default not all environment variables are copied to Emacs. This package ensures proper synchronization between the two.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :hook
    ((after-init . exec-path-from-shell-initialize)
     (magit-credential . smahm006/copy-ssh-env))
    :preface
    (defun smahm006/copy-ssh-env ()
      (exec-path-from-shell-copy-env "SSH_AGENT_PID")
      (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
    :custom
    (epg-pinentry-mode 'loopback)
    (exec-path-from-shell-variables '("PATH" "SHELL" "GOPATH")))
  ;; :config
  ;; (setenv "SSH_AUTH_SOCK" (string-chop-newline (shell-command-to-string "gpgconf --list-dirs agent-ssh-socket")))
#+end_src
**** [[https://github.com/emacscollective/no-littering][no-littering]]
The default paths used to store configuration files and persistent data are not consistent across Emacs packages. This isnâ€™t just a problem with third-party packages but even with built-in packages. The following package helps sort that out.
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :init
    ;; Store backup and auto-save files in no-littering-var-directory
    (setq no-littering-etc-directory (format "%s/emacs/etc/" xdg-data))
    (smahm006/mkdir no-littering-etc-directory)
    (setq no-littering-var-directory (format "%s/emacs/var/" xdg-data))
    (smahm006/mkdir no-littering-var-directory)
    (setq no-littering-cache-directory (format "%s/emacs/cache/" xdg-cache))
    (smahm006/mkdir no-littering-cache-directory)
    :config
    ;; Store backup and auto-save files in no-littering-var-directory
    (no-littering-theme-backups)
    ;; Store cookies in cache directory
    (setq url-cookie-file (no-littering-expand-var-file-name "cookies"))
    ;; Store lock files in no-littering-var-directory
    (let ((lock-files-dir (no-littering-expand-var-file-name "lock-files/")))
      (smahm006/mkdir lock-files-dir)
      (setq lock-file-name-transforms `((".*" ,lock-files-dir t))))
    ;; Store customization file in no-littering-etc-directory
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (add-hook 'after-init-hook (lambda () (load custom-file 'noerror 'nomessage)) -99))
#+end_src
*** Authentication
I use a GPG key stored in a Yubikey for most of my authentication
#+begin_src emacs-lisp
  (use-package epa-file
    :ensure nil
    :init
    (epa-file-enable)
    :config
    ;; Disable backup and autosave of .vcf and .gpg files
    ;; Alternatively, to protect only some files, like some .txt files, use a line like
    ;; // -*-mode:asciidoc; mode:sensitive-minor; fill-column:132-*-
    (setq auto-mode-alist
  	(append
  	 (list '("\\.\\(vcf\\|gpg\\)$" . sensitive-minor-mode)) auto-mode-alist)))  
#+end_src
** Footer
#+begin_src text
;; init.el end
#+end_src
* Org
:PROPERTIES:
:header-args: :tangle lisp/smahm006-org.el :mkdirp yes
:END:
** Header
#+begin_src emacs-lisp :tangle init.el
  (require 'smahm006-org)
#+end_src
#+begin_src text
;; init.el - Org configuration file, managing structure, defaults, and integrations
;; Copyright (C) 2023-2025 Sohaib Mahmood
;; Homepage: https://github.com/smahm006/emacs
;; Code:
#+end_src
** Org Defaults
*** org
Org short for organization of my life mainly by using org-mode
#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :init
    (setq org-directory (format "%s/org/" xdg-home))
    (let ((org-archive-directory (format "%s/archives/" org-directory)))
      (smahm006/mkdir org-archive-directory)
      (setq org-archive-location (format "%s/%%s::" org-archive-directory)))
    :hook
    (org-mode . org-indent-mode)
    (org-mode . visual-line-mode)    
    :bind
    (:map smahm006/org-map
          ("c" . org-capture)
          ("a" . org-agenda)) 
    :custom
    (org-confirm-babel-evaluate nil)                     ; Do not ask about code evaluation
    (org-return-follows-link t)                          ; Follow links if entered on
    (org-mouse-1-follows-link t)                         ; Follow links if clicked on
    (org-link-descriptive t)                             ; Show links by description not URL
    (org-enforce-todo-dependencies t)                    ; Cannot set a headline to DONE if children arenâ€™t DONE
    (org-log-done 'time)                                 ; Add timstamp to items when done    
    
    ;; Languages to autoload for babel
    (org-babel-load-languages '((emacs-lisp . t)
                                (shell . t)
  			      (python . t)
  			      (ledger . t))))
#+end_src
*** [[https://github.com/snosov1/toc-org.git][toc-org]]
Toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub).
#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-mode))
#+end_src
*** [[https://github.com/jwiegley/emacs-async][async]]
Using the async package and the org-babel-tangle command, the code below will executes org-babel-tangle asynchronously when emacs.org is saved
#+begin_src emacs-lisp :noweb yes
  (use-package async
    :hook (after-save . smahm006/config-tangle)
    :preface
    (defcustom smahm006/config-file (expand-file-name "emacs.org" user-emacs-directory)
      "Path to the main configuration Org file."
      :type 'string)
    (defvar smahm006/config-last-change (nth 5 (file-attributes smahm006/config-file))
      "Timestamp of the last modification to the config file.")
    (defcustom smahm006/show-async-tangle-results nil
      "Whether to keep async tangle result buffers for later inspection."
      :type 'boolean)
(defun smahm006/async-babel-tangle (org-file)
    "Asynchronously tangle the given ORG-FILE."
    (let ((start-time (current-time)))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless smahm006/show-async-tangle-results
         `(lambda (result)
            (message "[%s] %s tangled in %.2fs"
                     (if result "âœ“" "âœ—")
                     ,org-file
                     (float-time (time-subtract (current-time) ',start-time))))))))
    (defun smahm006/config-updated-p ()
      "Return non-nil if the configuration file has been modified since the last tangle."
      (time-less-p smahm006/config-last-change
                   (nth 5 (file-attributes smahm006/config-file))))
    (defun smahm006/config-tangle ()
      "Asynchronously tangle the Org config file if it has been updated."
      (when (smahm006/config-updated-p)
        (setq smahm006/config-last-change (nth 5 (file-attributes smahm006/config-file)))
        (smahm006/async-babel-tangle smahm006/config-file))))
#+end_src
** Styling
*** [[https://github.com/minad/org-modern][org-modern]]
Modernize the look of org
#+begin_src emacs-lisp
  (use-package org-modern
    :custom
    (org-ellipsis "â€¦")
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-agenda-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    :config
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil))
#+end_src
*** [[https://github.com/awth13/org-appear][org-appear]]
Toggle visibility of hidden Org mode element parts upon entering and leaving an element.
#+begin_src emacs-lisp
  (use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src
** Capture
#+begin_src emacs-lisp :tangle init.el
  (use-package org-capture
    :ensure nil
    :custom
    ;; Todo
    (org-todo-keywords
     '((sequence
        "TODO(t)"  ; A task that needs doing & is ready to do
        "NEXT(n)"  ; Next task in a project          
        "|"
        "DONE(d)"  ; Task successfully completed
        )
       (sequence
        "WAIT(w)"  ; Something external is holding up this task
        "HOLD(h)"  ; This task is paused/on hold because of me
        "|"
        "KILL(k)"  ; Task was cancelled, aborted or is no longer applicable
        )))
    (org-todo-keyword-faces
     '(("TODO" :foreground "red" :weight bold)
       ("NEXT" :foreground "blue" :weight bold)
       ("DONE" :foreground "forest green" :weight bold)
       ("WAIT" :foreground "orange" :weight bold)
       ("HOLD" :foreground "magenta" :weight bold)
       ("KILL" :foreground "forest green" :weight bold))))
#+end_src
*** [[https://github.com/protesilaos/denote][denote]]
Simple notes with an efficient file-naming scheme
#+begin_src emacs-lisp
  ;; Another basic setup with a little more to it.
  (use-package denote
    :ensure t
    :hook (dired-mode . denote-dired-mode)
    :bind
    (:map smahm006/note-map
  	(("n" . denote)
  	 ("r" . denote-rename-file)
  	 ("l" . denote-link)
  	 ("b" . denote-backlinks)
  	 ("d" . denote-sort-dired)))
    :config
    (let ((org-notes-directory (format "%s/notes/" org-directory)))
      (smahm006/mkdir org-notes-directory)
      (setq denote-directory org-notes-directory))
    (denote-rename-buffer-mode 1))
#+end_src
** Agenda
#+begin_src emacs-lisp :tangle init.el
  (use-package org-agenda
    :ensure nil
    :bind (:map org-agenda-mode-map
                ("C-n" . org-agenda-next-item)
                ("C-p" . org-agenda-previous-item)
                ("g" . org-agenda-goto))
    :config
    (let ((org-agenda-directory (format "%s/agenda/" org-directory)))
      (smahm006/mkdir org-agenda-directory)
      (org-agenda-files org-agenda-directory)))
 #+end_src
** Finance
*** [[https://github.com/ledger/ledger-mode][ledger-mode]]
Good money management is a skill to be acquired as soon as possible. Fortunately
for us, [[https://www.ledger-cli.org/][Ledger]] allows you to have a double-entry accounting system directly from
the UNIX command line.
#+begin_src emacs-lisp
  (use-package ledger-mode
    :after org
    :mode ("\\.\\(dat\\|ledger\\)\\'")
    :hook (ledger-mode . ledger-flymake-enable)
    :bind
    (:map ledger-mode-map
          ("C-x C-s" . smahm006/ledger-save))
    (:map smahm006/org-map
          ("l" . smahm006/org-open-current-ledger))
    :preface
    (defun smahm006/org-open-current-ledger ()
      "Open the ledger file corresponding to the current year."
      (interactive)
      (let* ((current-year (format-time-string "%Y"))
             (ledger-file (format "%s/ledger/%s.org.gpg" org-dir current-year)))
        (find-file ledger-file)))
    (defun smahm006/ledger-save ()
      "Clean the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :custom
    (ledger-clear-whole-transactions t)
    :config
    (let ((org-ledger-directory (format "%s/ledger/" org-directory)))
      (smahm006/mkdir org-ledger-directory)))
#+end_src
** Footer
#+begin_src text
;; smahm006-org.el end
(provide 'smahm006-org)
#+end_src
* User Interface
:PROPERTIES:
:header-args: :tangle lisp/smahm006-ui.el :mkdirp yes
:END:
** Header
#+begin_src emacs-lisp :tangle init.el
  (require 'smahm006-ui)
#+end_src
#+begin_src text
;; init.el - Configures themes, fonts, icons, and other UI enhancements for a polished experience
;; Copyright (C) 2023-2025 Sohaib Mahmood
;; Homepage: https://github.com/smahm006/emacs
;; Code:
#+end_src
** UI Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    ;; Mouse
    (context-menu-mode (display-graphic-p))              ; Enable context menu on right click
    (mouse-yank-at-point t)                              ; Yank at point rather than pointer
    (xterm-mouse-mode (not (display-graphic-p)))         ; Mouse active in tty mode.
    (make-pointer-invisible t)                           ; Hide mouse pointer when typing

    ;; Cursor
    (cursor-type bar)                                    ; Underline-shaped cursor
    (cursor-intangible-mode t)                           ; Enforce cursor intangibility
    (x-stretch-cursor nil)                               ; Don't stretch cursor to the glyph width
    (blink-cursor-mode t)                                ; Blink cursor
    
    ;; Enable window dividers
    (window-divider-default-bottom-width 2)
    (window-divider-default-right-width 2)
    (window-divider-default-places t)
    (window-divider-mode t))
#+end_src
** Appearance
*** Theme
I switch themes quite often but usually I prefer high contrast dark themes.
#+begin_src emacs-lisp
(use-package gruber-darker-theme
  :if (and (display-graphic-p) (string= (smahm006/location) "home"))
  :init
  (load-theme 'gruber-darker t))
#+end_src
*** Fonts
Spending most of our time on GNU Emacs, it is important to use a font that will
make our reading easier.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMonoNerdFont 14")
  (set-fontset-font t 'latin "Noto Sans")
#+end_src
*** Icons
*** [[https://github.com/rainstormstudio/nerd-icons.el.git][nerd-icons]]
A library for Nerd Font icons. Required for many icons used in other packages
#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "JetBrains Mono Nerd Font"))
#+end_src
*** [[https://github.com/rainstormstudio/nerd-icons-completion.git][nerd-icons-completion]]
#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :after marginalia vertico
    :hook
    (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode))
#+end_src
*** [[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]]
Distinguish "work" buffers from "side" ones
#+begin_src emacs-lisp
(use-package solaire-mode
  :defer 0.1
  :custom (solaire-mode-remap-fringe t)
  :config (solaire-global-mode))
#+end_src
*** [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
An extensible emacs startup screen showing you whatâ€™s most important.
#+begin_src emacs-lisp
    (use-package dashboard
      :init
      (dashboard-setup-startup-hook)
      :custom
      (dashboard-banner-logo-title "Get Busy Living Or Get Busy Dying!")
      (dashboard-startup-banner 'logo)
      (dashboard-center-content t)
      (dashboard-vertically-center-content t)
      (dashboard-items '((agenda)
                         (projects . 3)
                         (recents   . 3)))
      (dashboard-set-file-icons t)
      (dashboard-set-heading-icons t)
      (dashboard-icon-type 'nerd-icons)
      (dashboard-startupify-list
       '(dashboard-insert-banner
         dashboard-insert-newline
         dashboard-insert-banner-title
         dashboard-insert-newline
         dashboard-insert-navigator
         dashboard-insert-newline
         dashboard-insert-items
         dashboard-insert-newline)))
#+end_src
** Lines
*** display-line-numbers
Enable line numbers for some modes
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :custom
    ;; Shift display once to accomodate growing line column
    (display-line-numbers-grow-only t)
    :hook
    (;; Enabled modes
     ((prog-mode) . display-line-numbers-mode)
     ((conf-mode) . display-line-numbers-mode)
     ((text-mode) . display-line-numbers-mode)
     ;; Disabled modes
     (org-mode . (lambda () (display-line-numbers-mode -1)))))
     ;; (eat-mode . (lambda () (display-line-numbers-mode -1)))
#+end_src
*** highlight-line
Highlighting of the current line (native mode)
#+begin_src emacs-lisp
  (use-package hl-line
    :ensure nil
    :hook
    ((prog-mode org-mode) . global-hl-line-mode))
#+end_src
*** [[https://github.com/jdtsmith/indent-bars.git][indent-bars]]
Fast, configurable indentation guide-bars for Emacs.
#+begin_src emacs-lisp
  (use-package indent-bars
    :custom
    (indent-bars-treesit-support t)
    (indent-bars-treesit-ignore-blank-lines-types '("module"))
    (indent-bars-treesit-wrap '((python
                                 argument_list parameters list list_comprehension dictionary
                                 dictionary_comprehension parenthesized_expression subscript)))
    (indent-bars-treesit-scope '((python
                                  function_definition class_definition for_statement
                                  if_statement with_statement while_statement)))
    (indent-bars-color-by-depth nil)
    (indent-bars-highlight-current-depth '(:face default :blend 0.4))
    (indent-bars-pad-frac 0.1)
    (indent-bars-pattern ".")
    (indent-bars-width-frac 0.2)
    :hook
    ((python-base-mode yaml-ts-mode emacs-lisp-mode) . indent-bars-mode))
#+end_src
** Modeline
*** [[https://github.com/dbordak/telephone-line/][telephone-line]]
Power-line style mode line which seems to work best with nyan mode
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure nyan-mode
    :hook
    (((after-init) . telephone-line-mode)
      ((telephone-line-mode) . nyan-mode))
    :config
    (setq telephone-line-lhs
          '((accent . (telephone-line-vc-segment
                       telephone-line-erc-modified-channels-segment))
            (nil    . (telephone-line-buffer-segment
                       telephone-line-nyan-segment))))
    (setq telephone-line-rhs
          '((nil    . (telephone-line-misc-info-segment))
            (accent . (telephone-line-major-mode-segment))
            (evil   . (telephone-line-airline-position-segment)))))
#+end_src
*** [[https://github.com/hlissner/emacs-hide-mode-line.git][hide-mode-line]]
An Emacs plugin that hides (or masks) the current buffer's mode-line.
#+begin_src emacs-lisp
  (use-package hide-mode-line)
    ;; :hook
    ;; (symbols-outline-mode . hide-mode-line-mode)
    #+end_src
** Footer
#+begin_src text
;; smahm006-ui.el end
(provide 'smahm006-ui)
#+end_src
* User Experience
:PROPERTIES:
:header-args: :tangle lisp/smahm006-ux.el :mkdirp yes
:END:
** Header
#+begin_src emacs-lisp :tangle init.el
  (require 'smahm006-ux)
#+end_src
#+begin_src text
;; init.el - Adds better completion, configures window/buffer/file management
;; Copyright (C) 2023-2025 Sohaib Mahmood
;; Homepage: https://github.com/smahm006/emacs
;; Code:
#+end_src
** UX Defaults
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    ;; Smoother scrolling
    (scroll-margin 0)                                    ; Reduce margin triggering automatic scrolling
    (scroll-conservatively 101)                          ; Avoid recentering when scrolling far
    (scroll-preserve-screen-position t)                  ; Don't move point when scrolling
    (fast-but-imprecise-scrolling t)                     ; More performant rapid scrolling over unfontified regions
    (pixel-scroll-precision-interpolate-mice nil)        ; Disable interpolation (causes wired jumps)
    (pixel-scroll-precision-mode (display-graphic-p))    ; Enable pixel-wise scrolling
    (pixel-scroll-precision-use-momentum t)              ; Enable momentum for scrolling lagre buffers
    )
#+end_src
** Completion
*** [[https://github.com/justbur/emacs-which-key.git][which-key]]
The mode displays the key bindings following your currently entered incomplete command (a ;; prefix) in a popup.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure nil
    :hook
    (after-init . which-key-mode)  
    :custom
    (which-key-idle-delay 0.5)
    (which-key-compute-remaps t)
    (which-key-prefix-prefix "ó°œ„ ")
    (which-key-separator " ")
    :config
    (which-key-setup-minibuffer))
 #+end_src
*** [[https://github.com/emacs-straight/vertico.git][vertico]]
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (require 'vertico-directory)
    :bind
    (:map vertico-map
          ("<return>" . vertico-directory-enter))
    :hook
    ((minibuffer-setup . cursor-intangible-mode)
     (after-init . vertico-mode))    
    :custom    
    (vertico-count 20)                         ; Show more candidates
    (vertico-resize t)                         ; Grow and shrink the Vertico minibuffer
    (vertico-cycle t)                          ; Enable cycling for `vertico-next' and `vertico-previous'.
    (minibuffer-prompt-properties              ; Do not allow the cursor in the minibuffer prompt
     '(read-only t cursor-intangible t face minibuffer-prompt))    
    (read-extended-command-predicate           ; Vertico commands are hidden in normal buffers.
     #'command-completion-default-include-p)
    (enable-recursive-minibuffers t)           ; Enable recursive minibuffers    
    (vertico-mouse-mode t)                     ; Enable Mouse support
    :preface
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    :config
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator))
#+end_src
*** [[https://github.com/minad/marginalia.git][marginalia]]
Richer annotations in the minibuffer.
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :hook
    (vertico-mode . marginalia-mode)    
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src
*** [[https://github.com/oantolin/orderless.git][orderless]]
Emacs completion style that matches multiple regexps in any order
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** [[https://github.com/minad/consult.git][consult]]
Additional featureful completion commands.
#+begin_src emacs-lisp
  (use-package consult
    :bind (([remap Info-searpch] . consult-info)           
           ([remap bookmark-jump] . consult-bookmark)
           ([remap goto-line] . consult-goto-line)
           ([remap imenu] . consult-imenu)
           ([remap locate] . consult-locate)
           ([remap load-theme] . consult-theme)
           ([remap man] . consult-man)           
           ([remap yank-pop] . consult-yank-pop)           
           ([remap yank-pop] . consult-yank-pop)
           :map smahm006/goto-map
           ("e" . consult-compile-error)
           ("f" . consult-flymake)            
           ("g" . consult-goto-line)          
           ("o" . consult-outline)            
           ("m" . consult-mark)
           ("k" . consult-global-mark)
           ("i" . consult-imenu)
           ("I" . consult-imenu-multi)
           :map smahm006/search-map
           ("f" . consult-find)
           ("F" . consult-locate)
           ("g" . consult-grep)
           ("G" . consult-git-grep)
           ("r" . consult-ripgrep)
           ("l" . consult-line)
           ("L" . consult-line-multi)
           ("k" . consult-keep-lines)
           ("u" . consult-focus-lines)
           ("e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)           
           ("M-s L" . consult-line-multi)     
           :map minibuffer-local-map
           ("M-s" . consult-history)          
           ("M-r" . consult-history))
    :custom
    (consult-yank-rotate 1)
    (register-preview-delay 0.5)
    (register-preview-function #'consult-register-format)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref))
#+end_src
*** COMMENT [[https://github.com/oantolin/embark.git][embark]]
Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session and in normal buffers.
#+begin_src emacs-lisp
  (use-package embark
    :after which-key
    :bind
    (("C-." . embark-act)         ;; pick some com fortable binding
     ("C-:" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)  ;; alternative for `describe-bindings'
     :map vertico-map
     ("C-SPC" . embark-select))   ;; good alternative: M-.
    :custom
    ;; Optionally replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command)
    :preface
    ;; The built-in embark-verbose-indicator displays actions in a buffer along with their keybindings and the first line of their docstrings.
    ;; Users desiring a more compact display can use which-key instead with the following configuration:
    ;; ref.: https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt
    (defun embark-which-key-indicator ()
      "An embark indicator that displays keymaps using which-key.
       The which-key help message will show the type and value of the
       current target followed by an ellipsis if there are further
       targets."
      (lambda (&optional keymap targets prefix)
        (if (null keymap)
            (which-key--hide-popup-ignore-command)
          (which-key--show-keymap
           (if (eq (plist-get (car targets) :type) 'embark-become)
               "Become"
             (format "Act on %s '%s'%s"
                     (plist-get (car targets) :type)
                     (embark--truncate-target (plist-get (car targets) :target))
                     (if (cdr targets) "â€¦" "")))
           (if prefix
               (pcase (lookup-key keymap prefix 'accept-default)
                 ((and (pred keymapp) km) km)
                 (_ (key-binding prefix 'accept-default)))
             keymap)
           nil nil t (lambda (binding)
                       (not (string-suffix-p "-argument" (cdr binding))))))))
    (defun embark-hide-which-key-indicator (fn &rest args)
      "Hide the which-key indicator immediately when using
      the completing-read prompter."
      (which-key--hide-popup-ignore-command)
      (let ((embark-indicators
             (remq #'embark-which-key-indicator embark-indicators)))
        (apply fn args)))
    :config
    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    (setq embark-indicators
          '(embark-which-key-indicator
            embark-highlight-indicator
            embark-isearch-highlight-indicator))
    (advice-add #'embark-completing-read-prompter
                :around #'embark-hide-which-key-indicator))
#+end_src
** Window Management
*** [[https://github.com/abo-abo/ace-window.git][ace-window]]
Quickly switch windows in Emacs.
#+begin_src emacs-lisp
  (use-package ace-window
    :autoload ace-display-buffer
    :init
    (winner-mode)
    :bind
    (("M-o" . ace-window)
     ("M-O" . smham006/ace-window-prefix)
     ("M-u" . smahm006/toggle-fullscreen-window)
     ([remap split-window-right] . smahm006/hsplit-last-window)
     ([remap split-window-below] . smahm006/vsplit-last-window)
     (:map smahm006/window-map
  	 ("b" . balance-windows)
  	 ("c" . recenter-top-bottom)
  	 ("i" . enlarge-window)
  	 ("j" . shrink-window-horizontally)
  	 ("k" . shrink-window)
  	 ("u" . winner-undo)
  	 ("r" . winner-redo)
  	 ("l" . enlarge-window-horizontally)
  	 ("s" . switch-window-then-swap-buffer)
  	 ("-" . text-scale-decrease)
  	 ("+" . text-scale-increase)
  	 ("=" . (lambda () (interactive) (text-scale-increase 0)))))
    :preface
    (defun smahm006/hsplit-last-window ()
      "Focus to the last created horizontal window."
      (interactive)
      (split-window-horizontally)
      (other-window 1))
    (defun smahm006/vsplit-last-window ()
      "Focus to the last created vertical window."
      (interactive)
      (split-window-vertically)
      (other-window 1))
    (defun smahm006/toggle-fullscreen-window ()
      "Toggle a buffer as fullscreen"
      (interactive)
      (if (= 1 (length (window-list)))
  	(jump-to-register '_)
        (progn
  	(window-configuration-to-register '_)
  	(delete-other-windows))))
    (defun smham006/ace-window-prefix ()
      "https://karthinks.com/software/emacs-window-management-almanac/#a-window-prefix-command-for-ace-window"
      (interactive)
      (display-buffer-override-next-command
       (lambda (buffer _)
         (let (window type)
           (setq
            window (aw-select (propertize " ACE" 'face 'mode-line-highlight))
            type 'reuse)
           (cons window type)))
       nil "[ace-window]")
      (message "Use `ace-window' to display next command buffer..."))
    :custom
    (aw-minibuffer-flag nil)    
    ;; Make Emacs ask where to place a new buffer
    (display-buffer-base-action
     '((display-buffer-reuse-window
        display-buffer-in-previous-window
        ace-display-buffer)))
    :custom-face
    (aw-leading-char-face ((t (:foreground "red" :weight bold :height 2.0))))
    :config
    ;; Ignore the inibuffer
    (add-to-list 'aw-ignored-buffers 'minibuffer-mode))
#+end_src
*** [[https://github.com/hkjels/mini-ontop.el.git][mini-ontop]]
Prevent windows from jumping on minibuffer activation.
#+begin_src emacs-lisp
  (use-package mini-ontop
    :vc (:url "https://github.com/hkjels/mini-ontop.el" :branch "main")
    :hook
    (after-init . mini-ontop-mode)    
    :custom
    (mini-ontop-lines 22)
    :config
    (with-eval-after-load 'embark
      (add-to-list
       'mini-ontop-ignore-predicates
       (lambda nil (eq this-command #'embark-act)))))
#+end_src
** Buffer Management
*** ibuffer
To manage them better, I use the ibuffer built-in package instead of buffer-menu, to have a nicer visual interface with a syntax color. I also include additional functions from Emacs Redux that I have found useful
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind
    (([remap switch-to-buffer] . consult-buffer)
    ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
    ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
    ([remap kill-buffer] . kill-current-buffer)    
    :map ctl-x-map
    ("B" . smahm006/switch-to-previous-buffer)
    :map smahm006/buffer-map
    ("r" . smahm006/rename-file-and-buffer)
    ("d" . smahm006/delete-file-and-buffer)
    ("o" . smahm006/kill-other-buffers))
  :init (smahm006/protected-buffers)
  :preface
  (defvar protected-buffers '("*scratch*" "*Messages*"))
  (defun smahm006/protected-buffers ()
    "Protect some buffers from being killed."
    (dolist (buffer protected-buffers)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill))))
  (defun smahm006/switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
  (defun smahm006/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
  (defun smahm006/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    p     (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
  (defun smahm006/kill-other-buffers ()
    "Kill other buffers except current one and protected buffers."
    (interactive)
    (eglot-shutdown-all)
    (mapc 'kill-buffer
          (cl-remove-if
           (lambda (nx)
             (or
              (eq x (current-buffer))
              (member (buffer-name x) protected-buffers)))
           (buffer-list)))
    (delete-other-windows)))
#+end_src
*** uniquify
We can override eamcs default mechanism for making buffer name unique
#+begin_src emacs-lisp
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-separator "/")
    (setq uniquify-after-kill-buffer-p t)
    (setq uniquify-ignore-buffers-re "^\\*"))
#+end_src
** File Management
*** [[https://github.com/lewang/backup-walker][backup-walker]]
It is important to have file backups available with GNU Emacs.
The following configuration forces a backup on every save of a file.
It also auto backups a file after a few seconds
We can also view the diff between backups and selectively restore one
#+begin_src emacs-lisp
  (use-package backup-walker
    :demand t
    :hook
    (after-init . savehist-mode)    
    :custom
    ;; Session backups
    (backup-by-copying t)                              ; Backs up by moving the actual file, no symlinks
    (vc-make-backup-files t)                           ; Backup versioned files
    (version-control t)                                ; Version numbers for backup files
    (make-backup-files t)                              ; Backup of a file the first time it is saved.
    (kept-new-versions 100)                            ; Number of newest versions to keep
    (kept-old-versions 100)                            ; Number of oldest versions to keep
    (delete-old-versions t)                            ; Delete excess backup files silently
    (delete-by-moving-to-trash t)                      ; Delete backups to trash
    
    ;; Auto save backups
    (auto-save-default t)                              ; Auto-save every buffer that visits a file
    (auto-save-timeout 20)                             ; Number of seconds between auto-save
    (auto-save-interval 200)                           ; Number of keystrokes between auto-saves

    ;; Command history backup
    (history-delete-duplicates t)                      ; Delete duplicates in history
    (history-length 25)                                ; Max history length
    (savehist-file (format "%s/emacs/history" xdg-cache))   ; history backup location
    :config
    (let* ((backup-session-dir  (format "%s/emacs/backups/session/" xdg-data))
    	 (auto-save-dir (format "%s/emacs/backups/saves/" xdg-data)))
      (smahm006/mkdir backup-session-dir)
      (smahm006/mkdir auto-save-dir)
      (setq backup-directory-alist `(("." . ,backup-session-dir)))
      (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))))
#+end_src
*** autorevert
Revert buffers when the underlying file has changed
#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :bind
    (:map smahm006/file-map
          ("x" . revert-buffer))        
    :hook
    (after-init . global-auto-revert-mode)
    :custom
    ;; Revert Dired and other buffers
    (global-auto-revert-non-file-buffers t)
    ;; Avoid polling for changes and rather get notified by the system
    (auto-revert-use-notify t)
    (auto-revert-avoid-polling t))
#+end_src
*** recentf
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook
    (after-init . recentf-mode)
    :bind
    ([remap recentf-open] . consult-recent-file)
    ([remap recentf-open-files] . consult-recent-file)
    (:map smahm006/file-map
          ("r" . recentf-open))    
    :custom
    (recentf-keep '(file-remote-p file-readable-p))
    (recentf-max-menu-items 10)
    (recentf-max-saved-items 100)
    (recentf-save-file (format "%s/emacs/recentf" xdg-cache))
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory)))
#+end_src
*** [[https://github.com/shingo256/trashed][trashed]]
Open, view, browse, restore or permanently delete trashed files
#+begin_src emacs-lisp
  (use-package trashed
    :bind
    (:map smahm006/file-map
          ("t" . trashed))    
    :config
    (setq delete-by-moving-to-trash t)    
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src
*** [[https://github.com/alexluigit/dirvish][dirvish]]
Dirvish is an improved version built on Emacs's builtin file manager Dired.
#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :bind
    ("<f1>" . dirvish-side)
    (:map smahm006/file-map  	
  	("d" . dirvish)
  	("f" . dirvish-fd))    
    (:map dirvish-mode-map
  	("F"   . dirvish-toggle-fullscreen)
  	("N"   . dirvish-narrow)
  	("M-f" . dirvish-history-go-forward)
  	("M-b" . dirvish-history-go-backward)  	  
  	("M-p" . dired-up-directory)
  	("M-n" . dired-find-file)
  	("M-d" . empty-trash)
  	("M-l" . dirvish-ls-switches-menu)
  	("M-m" . dirvish-mark-menu)
  	("M-s" . dirvish-setup-menu)
  	("M-t" . dirvish-layout-toggle)  	
  	("a"   . dirvish-quick-access)
  	("s"   . dirvish-quicksort)
  	("f"   . dirvish-file-info-menu)
  	("y"   . dirvish-yank-menu)
  	("v"   . dirvish-vc-menu)
  	("^"   . dirvish-history-last)
  	("h"   . dirvish-history-jump)
  	("z"   . dirvish-show-history)  	    	
  	("TAB" . dirvish-subtree-toggle))
    :custom
    (dirvish-reuse-session nil)
    (dirvish-subtree-state-style 'nerd)
    (dirvish-use-header-line 'global)
    (dired-listing-switches
     "-l --almost-all --human-readable --group-directories-first --no-group")    
    (dirvish-attributes
     '(nerd-icons file-time file-size collapse subtree-state vc-state))  
    (dirvish-path-separators (list
                              (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                              (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                              (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))    
    (dirvish-header-line-format
     '(:left (path) :right (free-space))
     dirvish-mode-line-format
     '(:left (sort file-time " " file-size symlink) :right (omit yank index)))    
    (dirvish-mode-line-format
     '(:left (sort symlink) :right (vc-info yank index)))    
    (dirvish-quick-access-entries
     '(("h" "~/"                                          "Home")
       ("d" "~/dump/"                                     "Downloads")
       ("w" "~/workstation"                               "Workstation")
       ("p" "~/media/pictures/"                           "Pictures")
       ("m" "/mnt/"                                       "Drives")
       ("t" "~/.local/share/Trash/files/"                 "TrashCan")
       ("r" "/"                                           "Root")))
    :config
    (dirvish-side-follow-mode))
#+end_src
*** project
Project.el is more than enough for my project management needs
#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :bind
    (([remap project-list-buffers] . consult-project-buffer)
    :map ctl-x-map
    ("C-p" . project-find-file)
    :map smahm006/project-map
    ("p" . project-switch-project)
    ("l" . project-list-buffers)
    ("b" . project-switch-to-buffer)
    ("k" . project-kill-buffers)
    ("S" . smahm006/project-save-all-buffers)
    ("r" . project-query-replace-regexp)
    ("s" . project-search))
    :preface
    (defun smahm006/project-save-all-buffers (&optional proj arg)
      "Save all file-visiting buffers in project without asking."
      (interactive)
      (let* ((proj (or proj (project-current)))
             (buffers (project-buffers (proj))))
        (dolist (buf buffers)
          ;; Act on base buffer of indirect buffers, if needed.
          (with-current-buffer (or (buffer-base-buffer buf) buf)
            (when (and (buffer-file-name buf)   ; Ignore all non-file-visiting buffers.
                       (buffer-modified-p buf)) ; Ignore all unchanged buffers.
              (let ((buffer-save-without-query t))  ; Save silently.
                (save-buffer arg)))))))
    :config
    (setq project-buffers-viewer 'project-list-buffers-ibuffer)
    (setq project-kill-buffers-display-buffer-list t)
    (setq project-switch-commands
   	'((project-find-file "Find file")
            (project-find-regexp "Find regexp")
            (project-find-dir "Find directory")
            (magit-project-status "Magit")))
    (setq project-vc-extra-root-markers '(".project")))
#+end_src
** Footer
#+begin_src text
;; smahm006-ux.el end
(provide 'smahm006-ux)
#+end_src
* Text Manipulation
** Deletion
** Navigation
** Search and Replace
** Spellchecking
** Multi-Cursor
** Undo & Redo
** Privileged
* Development
** Tree-sitter
** Version Control
** Language Servers
** Linters and Documentation
** Snippets
** Virtualization
* Languages
** Markup & Configuration
*** HTML
*** JSON
*** TOML
*** XML
*** YAML
** Scripting
*** Bash
** Application Programming
*** Python
*** Go
** Software Programming
*** C
*** C++
*** Rust


