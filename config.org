# -*- mode: org; -*-
#+TITLE: GNU Emacs Configuration
#+AUTHOR: Sohaib Mahmood
#+STARTUP: show2levels indent
#+PROPERTY: header-args :mkdirp yes :comments org :results none
#+EXCLUDE_TAGS: noexport
#+VERSION: 1.2.0
#+auto_tangle: t
* About
This is the configuration for my personal GNU Emacs setup.
#+name: header
#+begin_src emacs-lisp :var name="file name" :var description="file description"
  (format
   ";; %s - %s
  ;; Copyright (C) 2023-%s Sohaib Mahmood
  ;; Homepage: https://github.com/smahm006/emacs
  ;; Code:"
   name description (format-time-string "%Y") (format-time-string "%Y-%m-%d"))
#+end_src
* Early Emacs Initialization
:PROPERTIES:
:header-args: :tangle early-init.el
:END:
#+begin_src emacs-lisp :noweb yes
<<header(name="early-init.el", description="Sets up core settings before the first frame is created.")>>
#+end_src
** XDG Directory
[[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Base Directory]]
#+begin_src emacs-lisp
  (defvar xdg-state (getenv "XDG_STATE_HOME")
    "The XDG bin base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")  

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")  

  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src
** Optimize Startup Time
#+begin_src emacs-lisp  
  ;; We're going to increase the gc-cons-threshold to a very high number to decrease the load time and add a hook to measure Emacs startup time.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; Let's lower our GC thresholds back down to a sane level.
  (add-hook 'after-init-hook
            (lambda ()
              ;; restore after startup
              (setq gc-cons-threshold (* 16 1024 1024))) 99)

  ;; Profile emacs startup
  (add-hook 'after-init-hook
            (lambda ()
              (message "ðŸš€ Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Ignore X resources; its settings would be redundant with the other settings
  ;; in this file and can conflict with later config (particularly where the
  ;; cursor color is concerned).
  (advice-add #'x-apply-session-resources :override #'ignore)

  ;; remove "for information about gnu emacs..." message at startup
  (advice-add #'display-startup-echo-area-message :override #'ignore)

  ;; suppress the vanilla startup screen completely. we've disabled it with
  ;; `inhibit-startup-screen', but it would still initialize anyway.
  (advice-add #'display-startup-screen :override #'ignore)

  ;; never show the hello file
  (defalias #'view-hello-file #'ignore)

  ;; Disable warnings from the legacy advice API. They aren't useful.
  (setq ad-redefinition-action 'accept)

  ;; Ignore warnings about "existing variables being aliased".
  (setq warning-suppress-types '((defvaralias) (lexical-binding)))

  ;; Unset `file-name-handler-alist' too (temporarily). Every file opened and
  ;; loaded by Emacs will run through this list to check for a proper handler for
  ;; the file, but during startup, it wonâ€™t need any of them.
  (defvar file-name-handler-alist-old file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist file-name-handler-alist-old)))

  ;; Remove irreleant command line options for faster startup
  (setq command-line-x-option-alist nil)

  ;; Minimal UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** Configure Byte Compile
#+begin_src emacs-lisp    
  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
  ;; to skip the mtime checks on every *.elc file.
  (setq load-prefer-newer t)

  ;; Ensure JIT compilation is enabled for improved performance by
  ;; native-compiling loaded .elc files asynchronously
  (setq native-comp-jit-compilation t)

  ;; Move native compilation cache directory to xdg-cache
  (when (boundp 'native-comp-eln-load-path)
    (startup-redirect-eln-cache
     (expand-file-name (format "%s/emacs/eln-cache/" xdg-cache))))

  ;; Disable certain byte compiler warnings to cut down on the noise.
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  ;; Ensure that quitting only occurs once Emacs finishes native compiling,
  ;; preventing incomplete or leftover compilation files in `/tmp`.
  (setq native-comp-async-query-on-exit t)
  (setq confirm-kill-processes t)
#+end_src
** Runtime optimizations
#+begin_src emacs-lisp  
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
  (provide 'early-init)  
#+end_src
* Emacs Initialization
** Functions & Macros
** Packages
** Environment
** Authentication
** XDG Directories
** Configuration Persistence
* Appearance
** Theming
** Fonts
** Icons
** Menus
** Modeline
** Dashboard
* Management
** Buffer Management
** Window Management
** Minibuffer Management
** Project Management
** File Management
* Editing
** Deletion
** Navigation
** Search and Replace
** Spellchecking
** Multi-Cursor Editing
** Undo & Redo
** Privileged Editing
* Development
** Tree-sitter
** Version Control
** Language Servers
** Linters and Documentation
** Snippets
** Virtualization
* Org
** Settings
** Agenda
** Capture
** Note-taking
** Scheduling
** Finance
* Languages
** Markup & Configuration
*** HTML
*** JSON
*** TOML
*** XML
*** YAML
** Scripting
*** Bash
** Application Programming
*** Python
*** Go
** Software Programming
*** C
*** C++
*** Rust
